#!/usr/bin/env python3
import os
import json
import uuid
import socket
from datetime import datetime
from pathlib import Path
from flask import Flask, render_template, request, session, redirect, url_for, flash
from flask_socketio import SocketIO, emit, join_room, leave_room

from database import db  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à—É –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

app = Flask(__name__)
app.config['SECRET_KEY'] = 'super-secret-chat-key-2024'
app.config['DEBUG'] = True

socketio = SocketIO(app, cors_allowed_origins="*")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–∞
active_users = {}  # {socket_id: username}
user_sessions = {}  # {username: socket_id}

# ==================== ROUTES ====================

@app.route('/')
def index():
    if 'username' not in session:
        return redirect('/login')
    return redirect('/chat')

@app.route('/login', methods=['GET', 'POST'])
def login():
    if 'username' in session:
        return redirect('/chat')
    
    if request.method == 'POST':
        username = request.form['username'].strip()
        password = request.form['password']
        
        if not username or not password:
            flash('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è', 'error')
            return render_template('login.html')
        
        if db.verify_user(username, password):
            session['username'] = username
            session['user_id'] = str(uuid.uuid4())
            flash('–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥!', 'success')
            return redirect('/chat')
        else:
            flash('–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å', 'error')
    
    return render_template('login.html')

@app.route('/register', methods=['GET', 'POST'])
def register():
    if 'username' in session:
        return redirect('/chat')
    
    if request.method == 'POST':
        username = request.form['username'].strip()
        password = request.form['password']
        confirm_password = request.form['confirm_password']
        
        if not username or not password:
            flash('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è', 'error')
            return render_template('register.html')
        
        if len(username) < 3:
            flash('–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 3 —Å–∏–º–≤–æ–ª–æ–≤', 'error')
            return render_template('register.html')
        
        if len(password) < 6:
            flash('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤', 'error')
            return render_template('register.html')
        
        if password != confirm_password:
            flash('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç', 'error')
            return render_template('register.html')
        
        if db.add_user(username, password):
            flash('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.', 'success')
            return redirect('/login')
        else:
            flash('–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –∑–∞–Ω—è—Ç–æ', 'error')
    
    return render_template('register.html')

@app.route('/chat')
def chat():
    if 'username' not in session:
        return redirect('/login')
    
    username = session['username']
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
    all_users_data = db.get_all_users()
    all_users = [user['username'] for user in all_users_data]
    online_users = list(active_users.values())
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ —á–∞—Ç—ã –∏ –≥—Ä—É–ø–ø—ã
    user_private_chats = db.get_user_private_chats(username)
    user_groups = db.get_user_groups(username)
    
    return render_template('chat.html',
                         username=username,
                         all_users=all_users,
                         online_users=online_users,
                         private_chats=user_private_chats,
                         groups=user_groups,
                         active_users_count=len(active_users))

@app.route('/create_group', methods=['GET', 'POST'])
def create_group():
    if 'username' not in session:
        return redirect('/login')
    
    if request.method == 'POST':
        group_name = request.form['group_name'].strip()
        members = request.form.getlist('members')
        
        if not group_name:
            flash('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã', 'error')
            return redirect('/create_group')
        
        group_id = db.create_group(group_name, session['username'], members)
        if group_id:
            flash(f'–ì—Ä—É–ø–ø–∞ "{group_name}" —Å–æ–∑–¥–∞–Ω–∞!', 'success')
            return redirect('/chat')
        else:
            flash('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä—É–ø–ø—ã', 'error')
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫—Ä–æ–º–µ —Ç–µ–∫—É—â–µ–≥–æ
    all_users = [user['username'] for user in db.get_all_users()]
    other_users = [user for user in all_users if user != session['username']]
    
    return render_template('create_group.html', other_users=other_users)

@app.route('/profile')
def profile():
    if 'username' not in session:
        return redirect('/login')
    
    username = session['username']
    user_data = db.get_user(username)
    
    if not user_data:
        flash('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error')
        return redirect('/chat')
    
    user_private_chats = db.get_user_private_chats(username)
    user_groups = db.get_user_groups(username)
    
    profile_info = {
        'username': username,
        'joined_date': user_data.get('joined_date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
        'last_seen': user_data.get('last_seen', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
        'private_chats_count': len(user_private_chats),
        'groups_count': len(user_groups),
        'contacts_count': len(set([chat['other_user'] for chat in user_private_chats]))
    }
    
    return render_template('profile.html', profile=profile_info)

@app.route('/logout')
def logout():
    username = session.pop('username', None)
    if username and username in user_sessions:
        # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        for sid, user in list(active_users.items()):
            if user == username:
                del active_users[sid]
                break
        del user_sessions[username]
    
    flash('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã', 'info')
    return redirect('/login')

# ==================== SOCKET IO HANDLERS ====================

@socketio.on('connect')
def handle_connect():
    if 'username' in session:
        username = session['username']
        active_users[request.sid] = username
        user_sessions[username] = request.sid
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å–µ—â–µ–Ω–∏—è
        db.update_last_seen(username)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –æ–Ω–ª–∞–π–Ω
        emit('user_online', {'username': username}, broadcast=True)
        emit('online_users_update', {'users': list(active_users.values())}, broadcast=True)
        print(f"‚úÖ {username} –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è. –û–Ω–ª–∞–π–Ω: {len(active_users)}")

@socketio.on('disconnect')
def handle_disconnect():
    username = active_users.pop(request.sid, None)
    if username and username in user_sessions:
        del user_sessions[username]
    
    if username:
        emit('user_offline', {'username': username}, broadcast=True)
        emit('online_users_update', {'users': list(active_users.values())}, broadcast=True)
        print(f"‚ùå {username} –æ—Ç–∫–ª—é—á–∏–ª—Å—è. –û–Ω–ª–∞–π–Ω: {len(active_users)}")

@socketio.on('start_private_chat')
def handle_start_private_chat(data):
    username = session['username']
    other_user = data['other_user']
    
    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç
    chat_id = db.find_or_create_private_chat(username, other_user)
    
    # –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º –∫ –∫–æ–º–Ω–∞—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —á–∞—Ç–∞
    join_room(str(chat_id))
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
    chat_history = db.get_private_chat_history(chat_id)
    emit('private_chat_history', {
        'chat_id': chat_id,
        'other_user': other_user,
        'messages': chat_history
    })
    print(f"üí¨ {username} –Ω–∞—á–∞–ª —á–∞—Ç —Å {other_user}")

@socketio.on('join_group')
def handle_join_group(data):
    group_id = data['group_id']
    username = session['username']
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –≥—Ä—É–ø–ø–µ
    user_groups = db.get_user_groups(username)
    group_ids = [str(g['group_id']) for g in user_groups]
    
    if str(group_id) in group_ids:
        join_room(str(group_id))
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –≥—Ä—É–ø–ø—ã
        group_history = db.get_group_history(group_id)
        group_info = next((g for g in user_groups if str(g['group_id']) == str(group_id)), None)
        
        if group_info:
            emit('group_chat_history', {
                'group_id': group_id,
                'group_name': group_info['name'],
                'messages': group_history
            })
            print(f"üë• {username} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –≥—Ä—É–ø–ø–µ {group_info['name']}")

@socketio.on('private_message')
def handle_private_message(data):
    username = session['username']
    chat_id = data['chat_id']
    message_text = data['text'].strip()
    
    if message_text:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É
        db.add_private_message(chat_id, username, message_text)
        
        message_data = {
            'username': username,
            'text': message_text,
            'timestamp': datetime.now().strftime('%H:%M:%S')
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–º–Ω–∞—Ç—É –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —á–∞—Ç–∞
        emit('new_private_message', {
            'chat_id': chat_id,
            'message': message_data
        }, room=str(chat_id))
        
        print(f"üì® {username} -> –ß–∞—Ç {chat_id}: {message_text}")

@socketio.on('group_message')
def handle_group_message(data):
    username = session['username']
    group_id = data['group_id']
    message_text = data['text'].strip()
    
    if message_text:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É
        db.add_group_message(group_id, username, message_text)
        
        message_data = {
            'username': username,
            'text': message_text,
            'timestamp': datetime.now().strftime('%H:%M:%S')
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–º–Ω–∞—Ç—É –≥—Ä—É–ø–ø—ã
        emit('new_group_message', {
            'group_id': group_id,
            'message': message_data
        }, room=str(group_id))
        
        print(f"üë• {username} -> –ì—Ä—É–ø–ø–∞ {group_id}: {message_text}")

@socketio.on('typing_start')
def handle_typing_start(data):
    username = session['username']
    chat_type = data['chat_type']
    chat_id = data['chat_id']
    
    emit('user_typing', {
        'username': username,
        'chat_type': chat_type,
        'chat_id': chat_id
    }, room=str(chat_id), include_self=False)

@socketio.on('typing_stop')
def handle_typing_stop(data):
    chat_id = data['chat_id']
    emit('user_stop_typing', {'chat_id': chat_id}, room=str(chat_id))

# ==================== MAIN ====================

if __name__ == '__main__':
    def get_local_ip():
        try:
            s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            s.connect(("8.8.8.8", 80))
            ip = s.getsockname()[0]
            s.close()
            return ip
        except:
            return "127.0.0.1"
    
    local_ip = get_local_ip()
    
    print("üöÄ ChatTM Server —Å –ë–ê–ó–û–ô –î–ê–ù–ù–´–• –∑–∞–ø—É—â–µ–Ω!")
    print("=" * 50)
    print("üìç –õ–æ–∫–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø:")
    print("   http://localhost:5000")
    print("   http://127.0.0.1:5000")
    print("")
    print("üìç –°–µ—Ç–µ–≤–æ–π –¥–æ—Å—Ç—É–ø:")
    print(f"   http://{local_ip}:5000")
    print("")
    print("üì± –î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    print(f"   –û—Ç–∫—Ä–æ–π –±—Ä–∞—É–∑–µ—Ä –∏ –≤–≤–µ–¥–∏: http://{local_ip}:5000")
    print("")
    print("üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: chat.db")
    print("‚èπÔ∏è  –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: Ctrl+C")
    print("=" * 50)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞ –≤—Å–µ—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞—Ö
    socketio.run(app, host='0.0.0.0', port=5000, debug=True)