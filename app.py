import os
import json
import platform
from datetime import datetime
from pathlib import Path
from flask import Flask, render_template, request, session, redirect, url_for, jsonify
from flask_socketio import SocketIO, emit, join_room, leave_room

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = Flask(__name__)
app.config['SECRET_KEY'] = 'kali_linux_chat_secret_2024'
app.config['DEBUG'] = True

socketio = SocketIO(app, cors_allowed_origins="*")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
active_users = {}
user_profiles = {}
chat_rooms = {
    'general': {'users': [], 'messages': [], 'description': '–û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞'},
    'python': {'users': [], 'messages': [], 'description': '–û–±—Å—É–∂–¥–µ–Ω–∏–µ Python'},
    'help': {'users': [], 'messages': [], 'description': '–ü–æ–º–æ—â—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞'},
    'random': {'users': [], 'messages': [], 'description': '–°–≤–æ–±–æ–¥–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ'},
    'hacking': {'users': [], 'messages': [], 'description': '–≠—Ç–∏—á–Ω—ã–π —Ö–∞–∫–∏–Ω–≥'}
}

#  ROUTES 

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —á–∞—Ç–∞"""
    if 'username' not in session:
        return redirect('/login')
    
    user_agent = request.headers.get('User-Agent', '').lower()
    is_mobile = 'mobile' in user_agent or 'android' in user_agent
    
    return render_template('index.html',
                         username=session['username'],
                         rooms=chat_rooms,
                         active_users=active_users,
                         is_mobile=is_mobile,
                         total_users=len(active_users))

@app.route('/login', methods=['GET', 'POST'])
def login():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞"""
    if request.method == 'POST':
        username = request.form.get('username', '').strip()
        
        if not username or len(username) < 2:
            return render_template('login.html', error='–ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 —Å–∏–º–≤–æ–ª–æ–≤')
        
        if username in active_users.values():
            return render_template('login.html', error='–≠—Ç–æ –∏–º—è —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è')
        
        session['username'] = username
        session['login_time'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        session['user_agent'] = request.headers.get('User-Agent', 'Unknown')
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_profiles[username] = {
            'join_time': session['login_time'],
            'message_count': 0,
            'rooms_joined': []
        }
        
        return redirect('/')
    
    return render_template('login.html')

@app.route('/logout')
def logout():
    """–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
    username = session.pop('username', None)
    
    if username:
        # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        for sid, user in list(active_users.items()):
            if user == username:
                del active_users[sid]
                break
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
        save_chat_history()
    
    return redirect('/login')

@app.route('/profile')
def profile():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ—Ñ–∏–ª—è"""
    if 'username' not in session:
        return redirect('/login')
    
    username = session['username']
    profile_data = user_profiles.get(username, {})
    
    # –°—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    user_messages = 0
    user_rooms = []
    
    for room_name, room_data in chat_rooms.items():
        room_msg_count = sum(1 for msg in room_data['messages'] if msg.get('username') == username)
        if room_msg_count > 0:
            user_messages += room_msg_count
            user_rooms.append(room_name)
    
    stats = {
        'username': username,
        'join_time': profile_data.get('join_time', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
        'total_messages': user_messages,
        'rooms_joined': user_rooms,
        'active_rooms': len([r for r in user_rooms if username in chat_rooms[r]['users']]),
        'user_agent': session.get('user_agent', 'Unknown')
    }
    
    return render_template('profile.html', stats=stats)

@app.route('/stats')
def stats():
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞"""
    if 'username' not in session:
        return redirect('/login')
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–º–Ω–∞—Ç–∞–º
    room_stats = []
    for room_name, room_data in chat_rooms.items():
        room_stats.append({
            'name': room_name,
            'description': room_data['description'],
            'online_users': len(room_data['users']),
            'total_messages': len(room_data['messages']),
            'last_activity': room_data['messages'][-1]['timestamp'] if room_data['messages'] else '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏'
        })
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_messages = sum(len(room['messages']) for room in chat_rooms.values())
    most_active_room = max(chat_rooms.items(), key=lambda x: len(x[1]['messages']))[0]
    
    stats_data = {
        'total_online': len(active_users),
        'total_rooms': len(chat_rooms),
        'total_messages': total_messages,
        'most_active_room': most_active_room,
        'server_os': platform.system(),
        'server_time': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
        'room_stats': room_stats,
        'active_users': list(active_users.values())
    }
    
    return render_template('stats.html', stats=stats_data)

@app.route('/settings', methods=['GET', 'POST'])
def settings():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if 'username' not in session:
        return redirect('/login')
    
    if request.method == 'POST':
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        session['theme'] = request.form.get('theme', 'dark')
        session['notifications'] = 'notifications' in request.form
        session['sound_effects'] = 'sound_effects' in request.form
        session['auto_join'] = request.form.get('auto_join', 'general')
        
        return redirect('/settings?success=1')
    
    return render_template('settings.html',
                         current_theme=session.get('theme', 'dark'),
                         notifications=session.get('notifications', True),
                         sound_effects=session.get('sound_effects', True),
                         auto_join=session.get('auto_join', 'general'),
                         rooms=chat_rooms)

@app.route('/mobile')
def mobile_chat():
    """–ú–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è"""
    if 'username' not in session:
        return redirect('/login')
    
    return render_template('mobile.html',
                         username=session['username'],
                         rooms=chat_rooms,
                         active_users_count=len(active_users))

#  SOCKET IO HANDLERS 

@socketio.on('connect')
def handle_connect():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    if 'username' in session:
        username = session['username']
        active_users[request.sid] = username
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        emit('user_list_update', {
            'users': list(active_users.values()),
            'total': len(active_users)
        }, broadcast=True)
        
        emit('system_message', {
            'text': f' {username} –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è',
            'type': 'connect'
        }, broadcast=True)

@socketio.on('disconnect')
def handle_disconnect():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è"""
    username = active_users.pop(request.sid, None)
    
    if username:
        # –£–¥–∞–ª—è–µ–º –∏–∑ –≤—Å–µ—Ö –∫–æ–º–Ω–∞—Ç
        for room_data in chat_rooms.values():
            if username in room_data['users']:
                room_data['users'].remove(username)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö
        emit('user_list_update', {
            'users': list(active_users.values()),
            'total': len(active_users)
        }, broadcast=True)
        
        emit('system_message', {
            'text': f' {username} –æ—Ç–∫–ª—é—á–∏–ª—Å—è',
            'type': 'disconnect'
        }, broadcast=True)
        
        save_chat_history()

@socketio.on('join_room')
def handle_join_room(data):
    """–í—Ö–æ–¥ –≤ –∫–æ–º–Ω–∞—Ç—É"""
    room = data['room']
    username = session['username']
    
    if room in chat_rooms:
        join_room(room)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–º–Ω–∞—Ç—É –µ—Å–ª–∏ –µ—â–µ –Ω–µ—Ç
        if username not in chat_rooms[room]['users']:
            chat_rooms[room]['users'].append(username)
            user_profiles[username]['rooms_joined'] = list(set(user_profiles[username].get('rooms_joined', []) + [room]))
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∫–æ–º–Ω–∞—Ç—ã
        emit('room_history', {
            'room': room,
            'messages': chat_rooms[room]['messages'][-50:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å–æ–æ–±—â–µ–Ω–∏–π
        })
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–æ–º–Ω–∞—Ç—É
        emit('system_message', {
            'text': f'üéâ {username} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ',
            'type': 'room_join',
            'room': room
        }, room=room)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–æ–º–Ω–∞—Ç—ã
        emit('room_users_update', {
            'room': room,
            'users': chat_rooms[room]['users']
        }, room=room)

@socketio.on('leave_room')
def handle_leave_room(data):
    """–í—ã—Ö–æ–¥ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã"""
    room = data['room']
    username = session['username']
    
    if room in chat_rooms and username in chat_rooms[room]['users']:
        leave_room(room)
        chat_rooms[room]['users'].remove(username)
        
        emit('system_message', {
            'text': f' {username} –ø–æ–∫–∏–Ω—É–ª –∫–æ–º–Ω–∞—Ç—É',
            'type': 'room_leave',
            'room': room
        }, room=room)
        
        emit('room_users_update', {
            'room': room,
            'users': chat_rooms[room]['users']
        }, room=room)

@socketio.on('chat_message')
def handle_chat_message(data):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    room = data['room']
    username = session['username']
    message_text = data['text'].strip()
    
    if message_text and room in chat_rooms:
        message_data = {
            'username': username,
            'text': message_text,
            'timestamp': datetime.now().strftime('%H:%M:%S'),
            'room': room,
            'id': len(chat_rooms[room]['messages']) + 1
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        chat_rooms[room]['messages'].append(message_data)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_profiles[username]['message_count'] = user_profiles[username].get('message_count', 0) + 1
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –≤ –∫–æ–º–Ω–∞—Ç–µ
        emit('new_message', message_data, room=room)
        
        # –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π
        if len(chat_rooms[room]['messages']) % 5 == 0:
            save_chat_history()

@socketio.on('typing')
def handle_typing(data):
    """–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞"""
    emit('user_typing', {
        'username': session['username'],
        'is_typing': data['is_typing'],
        'room': data['room']
    }, room=data['room'], include_self=False)

#  UTILITIES 

def get_chat_history_path():
    """–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è Kali Linux"""
    base_dir = Path.home() / ".python_chat_kali"
    base_dir.mkdir(exist_ok=True)
    return base_dir / "chat_history.json"

def save_chat_history():
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞"""
    history_file = get_chat_history_path()
    try:
        with open(history_file, 'w', encoding='utf-8') as f:
            json.dump({
                'chat_rooms': chat_rooms,
                'user_profiles': user_profiles,
                'last_save': datetime.now().isoformat()
            }, f, ensure_ascii=False, indent=2)
        print(f" –ò—Å—Ç–æ—Ä–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {history_file}")
    except Exception as e:
        print(f" –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

def load_chat_history():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞"""
    history_file = get_chat_history_path()
    global chat_rooms, user_profiles
    
    if history_file.exists():
        try:
            with open(history_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
                chat_rooms.update(data.get('chat_rooms', {}))
                user_profiles.update(data.get('user_profiles', {}))
            print(f" –ò—Å—Ç–æ—Ä–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {len(chat_rooms)} –∫–æ–º–Ω–∞—Ç, {len(user_profiles)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        except Exception as e:
            print(f" –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")

#  MAIN 

if __name__ == '__main__':
    print(" –ó–∞–ø—É—Å–∫ Python Chat –¥–ª—è Kali Linux")
    print("=" * 50)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
    load_chat_history()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    print(" –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞ http://0.0.0.0:5000")
    print(" –î–æ—Å—Ç—É–ø —Å –¥—Ä—É–≥–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ø–æ IP –≤–∞—à–µ–π Kali Linux")
    print("  –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: Ctrl+C")
    print("=" * 50)
    
    try:
        socketio.run(app,
                    host='0.0.0.0',
                    port=5000,
                    debug=True,
                    allow_unsafe_werkzeug=True)
    except KeyboardInterrupt:
        print("\n –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é...")
        save_chat_history()
        print(" –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")